=begin pod
=head1 NAME

C<Config::BINDish::AST> - the standard C<Config::BINDish> AST tree representation

=head1 DESCRIPTION

As a module C<Config::BINDish::AST> defines all standard AST node classes used by
L<C<Config::BINDish::Actions>|https://github.com/vrurg/raku-Config-BINDish/blob/v0.0.3/docs/md/Config/BINDish/Actions.md>
to build the resulting representation of the parsed configuration.

As a class C<Config::BINDish::AST> is the base class for all other AST classes.

=head2 Labels

A little bit of special attention must be paid to labeling functionality of AST. Let's consider how an option is parsed:

    the-answer 42;

In the above example both `the-answer` and `42` are considered to be I<values> and as such they result in two instances
of L<C<Config::BINDish::AST::Value>|https://github.com/vrurg/raku-Config-BINDish/blob/v0.0.3/docs/md/Config/BINDish/AST/Value.md>.
Both objects then become children of an
L<C<Config::BINDish::AST::Option>|https://github.com/vrurg/raku-Config-BINDish/blob/v0.0.3/docs/md/Config/BINDish/AST/Option.md>
instance. Roughly, the parsed tree will look like:

    Option
     `---- Value
     `---- Value

To distinguish one value from another we can attach labels to them. So, the value representing option name will get
tagged as I<"option-name">; and I<42> will become I<"option-value">.

See methods C<mark-as>, C<labels>, C<is-marked>, C<child>, C<children> below.

=head1 METHODS

=head3 C<dup(*%twiddles)>

This method is close in its functionality to the standard Raku C<clone> method, but adjusted for the needs of AST class
family.

=head3 C<set-parent(Config::BINDish::AST::Node:D $parent)>

Sets AST instance parent node.

=head3 C<multi parent()>

Returns current parent node.

=head3 C<multi parent(Config::BINDish::AST:U \parent-type)>

Returns the closest parent node of type C<parent-type>. For example, to get the enclosing block of a
L<C<Config::BINDish::AST::Value>|https://github.com/vrurg/raku-Config-BINDish/blob/v0.0.3/docs/md/Config/BINDish/AST/Value.md> one can do:

    $value.parent(Config::BINDish::AST::Block);

=head3 C<multi mark-as(*@labels)>

Sets labels for AST instance.

=head3 C<is-marked(Str:D $label --> Bool:D)>

Returns I<True> if AST object is marked with C<$label>.

=head3 C<labels()>

Returns a list of all AST object labels.

=head3 C<ast-name()>

Returns current node name, based on the node class name. If the name starts with I<Config::BINDish::AST::> then this
part is stripped off. Otherwise the class name is considered to be the name.

=head3 C<dump(Int:D :$level = 0 --> Str:D)>

Returns current node' string representation which consists of its C<ast-name> and C<gist>. The string would be indented
by C<$level> white spaces.

=head3 C<register-type(Str:D $ast-name, Mu \ast-type)>

Method registers an C<ast-type> class under C<$ast-name>. C<new-ast> method (see below) can later create a node instance
based on its registered name.

=head3 C<new-ast(Str:D $node-type, |profile --> Config::BINDish::AST:D)>

Creates a new instance of ast node based on its name. The name can be either a registered AST node name, see
C<register-type> method above; or a short name under C<Config::BINDish::AST::> namespace. If no associated AST type
object is found then a failure wrapped around
L<C<Config::BINDish::X::AST::DoesnExists>|https://github.com/vrurg/raku-Config-BINDish/blob/v0.0.3/docs/md/Config/BINDish/X/AST/DoesnExists.md>
is returned.

For example, with the following statement:

    Config::BINDish::AST.register-type("MyAppNode", MyApp::Config::AST::Node);

it is then possible to:

    Config::BINDish::AST.new-ast("MyAppNode", :foo(42), :bar("The Answer")); # An instance of My::App::Config::AST::Node

For one of the standard AST nodes one can:

    Config::BINDish::AST.new-ast('Block', :name(...), :class(...), ...); # An instance of Config::BINDish::AST::Block

=head3 C<<top-node(--> Config::BINDish::AST)>>

Returns the topmost node, or, in other words, the root of the AST tree.

=head1 AST NODE CLASSES AND ROLES

=head2 Roles

=item L<C<Config::BINDish::AST::Container>|https://github.com/vrurg/raku-Config-BINDish/blob/v0.0.3/docs/md/Config/BINDish/AST/Container.md>
=item L<C<Config::BINDish::AST::Node>|https://github.com/vrurg/raku-Config-BINDish/blob/v0.0.3/docs/md/Config/BINDish/AST/Parent.md>

=head2 Classes

=item L<C<Config::BINDish::AST::Block>|https://github.com/vrurg/raku-Config-BINDish/blob/v0.0.3/docs/md/Config/BINDish/AST/Block.md>
=item L<C<Config::BINDish::AST::Comment>|https://github.com/vrurg/raku-Config-BINDish/blob/v0.0.3/docs/md/Config/BINDish/AST/Comment.md>
=item L<C<Config::BINDish::AST::Option>|https://github.com/vrurg/raku-Config-BINDish/blob/v0.0.3/docs/md/Config/BINDish/AST/Option.md>
=item L<C<Config::BINDish::AST::NOP>|https://github.com/vrurg/raku-Config-BINDish/blob/v0.0.3/docs/md/Config/BINDish/AST/NOP.md>
=item L<C<Config::BINDish::AST::Stmts>|https://github.com/vrurg/raku-Config-BINDish/blob/v0.0.3/docs/md/Config/BINDish/AST/Stmts.md>
=item L<C<Config::BINDish::AST::TOP>|https://github.com/vrurg/raku-Config-BINDish/blob/v0.0.3/docs/md/Config/BINDish/AST/TOP.md>
=item L<C<Config::BINDish::AST::Value>|https://github.com/vrurg/raku-Config-BINDish/blob/v0.0.3/docs/md/Config/BINDish/AST/Value.md>

=head1 SEE ALSO

L<C<Config::BINDish>|https://github.com/vrurg/raku-Config-BINDish/blob/v0.0.3/docs/md/Config/BINDish.md>,
L<C<Config::BINDish::Aactions>|https://github.com/vrurg/raku-Config-BINDish/blob/v0.0.3/docs/md/Config/BINDish/Aactions.md>

=head1 AUTHOR

Vadim Belman <vrurg@cpan.org>

=end pod