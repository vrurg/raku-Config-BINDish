=begin pod
=CLASS 
C<Config::BINDish::Grammar::Strictness> - strict mode options

=DESCRIPTION 
This class defines what parts of the parser should operate in strict mode. See L<#ATTRIBUTES>.

The most simple way to initialize an instance of this class is to coerce it from a L<C<Bool>|https://docs.raku.org/type/Bool> value:

    Config::BINDish::Grammar::Strictness(True); # All strict

From the perspective of creating a new grammar it would be done as:

    Config::BINDish::Grammar.parse(..., :strict);   # All strict
    Config::BINDish::Grammar.parse(..., :!strict);  # All non-strict

=ATTRIBUTES 
=head3 L<C<Bool:D>|https://docs.raku.org/type/Bool> C<$.syntax = False>

When set the parser will require a semi-colon (C<;>) after all statements. Otherwise semi-colon is optional after
block's closing curly brace, and after an option if it is followed by a closing brace. The following example is ok
when syntax is non-strict:

    block {
        option "foo"
    }

Otherwise it has to be like this:

    block {
        option "foo";
    };

=head3 L<C<Bool:D>|https://docs.raku.org/type/Bool> C<$.options = False>

This attribute determines if all options have to be explicitly pre-declared.

See method C<declare-options> in L<C<Config::BINDish::Grammar>|rakudoc:Config::BINDish::Grammar>.

=head3 L<C<Bool:D>|https://docs.raku.org/type/Bool> C<$.blocks = False>

This attribute determines if all block types have to be explicitly pre-declared.

See method C<declare-blocks> in L<C<Config::BINDish::Grammar>|rakudoc:Config::BINDish::Grammar>.

=head3 L<C<Bool:D>|https://docs.raku.org/type/Bool> C<$.warnings = True>

If set the the grammar will issue warnings when it suspects a problem. For example, a warning will be printed if a hash
is used to initialize grammar's C<%.options> or C<%.blocks> attributes:

    Config::BINDish.new: options => { :op1<op> => { ... } };

Because by default Raku uses hashes with L<C<Str>|https://docs.raku.org/type/Str> keys, C«:op1<op>» will be coerced and instead a
L<C<Pair>|https://docs.raku.org/type/Pair>, representing option C<op> ID and keyword, the grammar will find a string I<"op1\top">
which is an invalid keyword.

=head1 SEE ALSO

L<C<Config::BINDish>|rakudoc:Config::BINDish>,
L<C<Config::BINDish::Grammar>|rakudoc:Config::BINDish::Grammar>

=AUTHOR Vadim Belman <vrurg@cpan.org>


=end pod

