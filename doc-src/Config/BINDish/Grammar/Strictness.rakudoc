
=begin pod
=CLASS

C<Config::BINDish::Grammar::Strictness> - strict mode options

=DESCRIPTION

This class defines what parts of the parser should operate in strict mode. See L<#ATTRIBUTES>.

The most simple way to initialize an instance of this class is to coerce it from a L<C<Bool>|https://docs.raku.org/type/Bool> value:

    Config::BINDish::Grammar::Strictness(True); # All strict

From the perspective of creating a new grammar it would be done as:

    Config::BINDish::Grammar.parse(..., :strict);   # All strict
    Config::BINDish::Grammar.parse(..., :!strict);  # All non-strict

=ATTRIBUTES

=head3 L<C<Bool:D>|https://docs.raku.org/type/Bool> C<$.syntax = False>

When set the parser will require a semi-colon (C<;>) after all statements. Otherwise semi-colon is optional after
block's closing curly brace, and after an option if it is followed by a closing brace. The following example is ok
when syntax is non-strict:

    block {
        option "foo"
    }

Otherwise it has to be like this:

    block {
        option "foo";
    };

=head3 L<C<Bool:D>|https://docs.raku.org/type/Bool> C<$.options = False>

This attribute determines if all options have to be explicitly pre-declared.

See method C<declare-options> in L<C<Config::BINDish::Grammar>|https://github.com/vrurg/raku-Config-BINDish/blob/v0.0.3/docs/md/Config/BINDish/Grammar.md>.

=head3 L<C<Bool:D>|https://docs.raku.org/type/Bool> C<$.blocks = False>

This attribute determines if all block types have to be explicitly pre-declared.

See method C<declare-blocks> in L<C<Config::BINDish::Grammar>|https://github.com/vrurg/raku-Config-BINDish/blob/v0.0.3/docs/md/Config/BINDish/Grammar.md>.

=head1 SEE ALSO

L<C<Config::BINDish>|https://github.com/vrurg/raku-Config-BINDish/blob/v0.0.3/docs/md/Config/BINDish.md>,
L<C<Config::BINDish::Grammar>|https://github.com/vrurg/raku-Config-BINDish/blob/v0.0.3/docs/md/Config/BINDish/Grammar.md>

=AUTHOR Vadim Belman <vrurg@cpan.org>

=end pod