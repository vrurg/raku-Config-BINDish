=begin pod
=head1 NAME

C<role Config::BINDish::AST::Blockish> - interface of a generic block class

=head1 DESCRIPTION

This role mostly implements basic block search capabilities provding interface for locating and pulling out various
kinds of children objects.

=head1 METHODS

=head3 C<<multi find(:$block!, :$name, :$class, Bool :$local --> Config::BINDish::AST::Block)>>

Similar to C<find-all(:$block!, ...)> candidate but makes makes sure that only one block entry is found. It either
returns the block instance found, or L<C<Nil>|https://docs.raku.org/type/Nil>, or throws with
L<C<Config::BINDish::X::Block::Ambiguous>|https://github.com/vrurg/raku-Config-BINDish/blob/v0.0.3/docs/md/Config/BINDish/X/Block/Ambiguous.md>
if more than one candidate found.

=head3 C<<multi find(:$option!, Bool :$local --> Config::BINDish::AST::Option)>>

Similar to the candidate for C<:$block!>, but for options. Returns
L<C<Config::BINDish::AST::Option>|https://github.com/vrurg/raku-Config-BINDish/blob/v0.0.3/docs/md/Config/BINDish/AST/Option.md>.
Throws with
L<C<Config::BINDish::X::Option::Ambiguous>|https://github.com/vrurg/raku-Config-BINDish/blob/v0.0.3/docs/md/Config/BINDish/X/Option/Ambiguous.md>.

=head3 C<block($block, *%p)>

A shortcut for C<$node.find(:$block, |%p)>.

=head3 C<blocks($block, *%p)>

A shortcut for $<$node.find-all(:$block, |%p)>.

=head3 C<option($option, Bool :$local = True, *%p)>

A shortcut for C<$node.find(:$option, :$local, |%p)>. Note that C<$local> is I<True> by default as this is the most
anticipated mode of operation. With C<:!local> it's still possible to do a recursive search for a unique option
instance.

=head3 C<options($option, Bool :$local = True, *%p)>

A shortcut to C<$node.find-all(:$option, :$local, |%p)>. Note that C<$local> is also set to I<True> by default, as for
C<option> method above. This is still meaningful because a block may contain multiple options of the same name.

=head3 C<value($option, Bool :$local = True, *%p)>

This method is similar to the C<option> method above except that C<value> returns not option but payload
of the option's value.

=head3 C<values(Bool :$raw)>

Returns block's standalone values. For example, for the following example it will return C<1, 2, 3>:

    block "foo" {
        1; 2; 3;
    }

If C<$raw> named argument is used then instead of payloads the method will return instances of
L<C<Config::BINDish::AST::Value>|https://github.com/vrurg/raku-Config-BINDish/blob/v0.0.3/docs/md/Config/BINDish/AST/Value.md>.

=head2 Method C<get>

This is an umbrella method which provides a few ways of accessing configuration data.

=head3 C<multi get(Str:D $option, Bool :$raw, Bool :$local = True)>

By default returns C<$option> value. With C<:raw> argument will return corresponding
L<C<Config::BINDish::AST::Option>|https://github.com/vrurg/raku-Config-BINDish/blob/v0.0.3/docs/md/Config/BINDish/AST/Option.md>
object. With C<:!local> will search for the option recursively.

    $block.get("foo");        # Option "foo" value

=head3 C<multi get(Str:D :$option, Bool :$local = True)>

Returns an option object.

=head3 C<multi get(Str:D :$value, Bool :$local = True)>

Returns an option value. Note that C<$value> must contain option keyword:

    $block.get: :value<foo>; # Option "foo" value

=head3 C<multi get(Str:D :$block, *%c)>

Finds and returns a block object. Named arguments in C<%c> must be all the same as for the C<block> method above.

=head3 C<multi get(Pair:D $path)>

I<B<NOTE!> This interface is experimental and may change in the future versions of the module. Yet, if it ever be
removed this won't happen without a deprecation cycle.>

This is the most advanced form of C<get> method. It allows to find an option by its path. The path is defined as a
nested structure of L<C<Pair>|https://docs.raku.org/type/Pair>s. For each C<Pair> its key specifies a subblock within
its parent block; value specifies an object within the subblock. In a pseudocode it looks like:

    $block => $subpath # Proceed to subpath under $block
    $block => $option  # Get option value from $block

Both key and value can be L<C<Pair>|https://docs.raku.org/type/Pair>s.

When key is a L<C<Pair>|https://docs.raku.org/type/Pair> then it is considered a block reference. Its key defines block type, its value defines block
name and, possibly, class:

    :foo<bar> => ...; # find in `foo "bar" { ... }`
    :foo("bar", "baz") => ... # find in `foo "bar" baz { ... }`

When value is a L<C<Pair>|https://docs.raku.org/type/Pair> then it is considered the next step in the path what returns us recursively to the definition
of the path above.

Let's use an example from tests:

    multi "1" {
        opt 42;
        subblk "level 1.a" {
            opt 1.3;
            subsubblk "level 2" nesting {
                opt2 "π";
            }
        }
        subblk "level 1.a" special {
            opt -1.3;
        }
        subblk "level 1.b" {
            opt 4.2;
        }
    }

    multi {
        opt "just multi"
    }

    multi "special" class {
        num 3.14e0;
    }

    top-opt 3.1415926;

Assuming that C<$cfg> is our
L<C<Config::BINDish>|https://github.com/vrurg/raku-Config-BINDish/blob/v0.0.3/docs/md/Config/BINDish.md>
instance, and by noting that method C<get> is available on it via C<$.top> attribute, we can have the following:

    $cfg.get: :multi => "opt"; # Get option "opt" from the nameless block multi, i.e. results in "just multi"
    $cfg.get: :multi("1") =>
                :subblk("level 1.a") =>
                    :subsubblk("level 2", "nesting") =>
                        "opt2"; # "π"

=head1 SEE ALSO

L<C<Config::BINDish>|https://github.com/vrurg/raku-Config-BINDish/blob/v0.0.3/docs/md/Config/BINDish.md>,
L<C<Config::BINDish::AST>|https://github.com/vrurg/raku-Config-BINDish/blob/v0.0.3/docs/md/Config/BINDish/AST.md>

=head1 AUTHOR

Vadim Belman <vrurg@cpan.org>

=end pod
