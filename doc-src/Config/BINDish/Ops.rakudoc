=begin pod
=head1 NAME

C<Config::BINDish::Ops> - operators for L<C<Config::BINDish>|rakudoc:Config::BINDish>

=head1 SYNOPSIS

    my $cfg = Config::BINDish.new;
    $cfg.read: string => q:to/CFG/;
                            top-opt "is top";
                            cluster "generic" {
                                the-answer 42;
                                group {
                                    service "api" {
                                        host "h1" {
                                            ip "192.168.1.2";
                                        }
                                        host "h2" {
                                            ip "192.168.1.3";
                                            interface "eth2";
                                        }
                                    }
                                }
                            }
    say $cfg ∷ :cluster<generic> ∷ :group ∷ :service<api> ∷ :host<h2> ∷ <interface ip>; # eth2 192.168.1.3
    say $cfg.top ∷ :cluster<generic> ∷ :group ∷ :service<api> ∷ :host<h2> ∷ <interface ip>; # eth2 192.168.1.3

=head1 DESCRIPTION

=head2 Request Operator C<∷>

Request operator is a front-end to L<C<Config::BINDish::AST::Block>|rakudoc:Config::BINDish::AST::Block> C<get> method. It is available in
either Unicode (C<∷>) or ASCI (C<::>) form. Both are totally identical. But since the ASCI form also serves as name
space separator for long names like C<Config::BINDish::Ops>, there is a slight chance that it would clash that. For
this reason the Unicode version is preferable.

The operator has C<list> associativity making it follow any rules that apply to
L<the comma operator|https://docs.raku.org/routine/,>.

To import any form of the operator into your code namespace, use L<C<Config::BINDish>|rakudoc:Config::BINDish> with either of both
arguments:

    use Config::BINDish <op>; # Import Unicode version
    use Config::BINDish <ascii-op>; # Import ASCII version
    use Config::BINDish <op ascii-op>; # Import both versions

=head3 Syntax And Semantics

The operator mimics Raku's long name resolution behaviors. I.e. the meaning of:

    $cfg ∷ :outer ∷ :inner<named> ∷ "option";

is to:

=item find block I<outer> in the config top-level
=item then find subblock I<inner> with name I<"named"> in the I<outer> block
=item then find I<option> in the I<inner> block and return its value.

Elements of the path defined with the operator can be either
L<C<Pair>|https://docs.raku.org/type/Pair>s or strings when referring to a block. Or they could be either a string, or a
list or any other L<C<Positional>|https://docs.raku.org/type/Positional> object which contains a list of string,when
referring an option.

In a multi-component path all elements between the first and the last ones are always treated as block references.

The first element must be either an L<C<Config::BINDish>|rakudoc:Config::BINDish> instance, or a
L<C<Config::BINDish::AST::Block>|rakudoc:Config::BINDish::AST::Block>.

The last path element defines the kind of request. If it is a string, or a
L<C<Positional>|https://docs.raku.org/type/Positional>, or a L<C<Code>|https://docs.raku.org/type/Code> then the
operator is expected to return an option. If the last element is a L<C<Pair>|https://docs.raku.org/type/Pair> then it is
expected to return a block.

The following examples are based on the L<#SYNOPSIS> example:

    $cfg ∷ :cluster<generic> ∷ :group;        # returns a block object
    $cfg ∷ :cluster<generic> ∷ "the-answer";  # returns 42
    $cfg ∷ :cluster<generic> ∷ :group ∷ :service<api> ∷ :host<h2> ∷ <interface ip>; # ("eth2", "192.168.1.3")
    $cfg ∷ :cluster<generic> ∷ :group ∷ :service<api> ∷ :host<h2> ∷ { <interface ip> }; # ("eth2", "192.168.1.3")

In the last example the code block is supplied with C«:host<h2>» block object as its argument. The return value of the
block is turned into a L<C<List>|https://docs.raku.org/type/List> to be used as a positional. It means, for example, that:

    $cfg ∷ :cluster<generic> ∷ { "the-answer" }

will return a list with a single element being C<42> integer.

The operator can be adverbed with L<C<Config::BINDish::AST::Block>|rakudoc:Config::BINDish::AST::Block> method C<get> named parameters:

    $cfg ∷ :cluster<generic> ∷ <the-answer> :raw; # returns an option object
    $cfg :: :cluster<generic> ∷ <group> :block;   # returns a block object

Also, because of the operator reliance upon the `get` method, it can return default values for elements missing from
the configuration file.

=head1 SEE ALSO

L<C<Config::BINDish>|rakudoc:Config::BINDish>,
L<C<Config::BINDish::AST>|rakudoc:Config::BINDish::AST>

=head1 AUTHOR

Vadim Belman <vrurg@cpan.org>

=end pod

